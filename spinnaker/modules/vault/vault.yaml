global:
  enabled: true
  tlsDisable: false

injector:
  image:
    tag: "0.1.1"
  agentImage:
    tag: "1.3.1"
  namespaceSelector:
     matchLabels:
       sidecar-injector: enabled

ui:
  enabled: true
  serviceType: LoadBalancer
  loadBalancerIP: ${load_balancer_ip}
  externalPort: 443

server:
  image:
    repository: "vault"
    tag: "1.3.1"

  extraContainers:
    - name: vault-init
      image: "devorbitus/vault-init:1.2.1"
      imagePullPolicy: IfNotPresent
      resources:
        requests:
          cpu: "100m"
          memory: "64Mi"
      env:
      - name: GCS_BUCKET_NAME
        value: "${gcs_bucket_name}"
      - name: KMS_KEY_ID
        value: "${crypto_key_id}"
      - name: VAULT_ADDR
        value: "http://127.0.0.1:8200"
      - name: VAULT_SECRET_SHARES
        value: "1"
      - name: VAULT_SECRET_THRESHOLD
        value: "1"

  extraEnvironmentVars:
    VAULT_ADDR: http://127.0.0.1:8200

  serviceAccount:
    annotations:
      "iam.gke.io/gcp-service-account": "${cluster_sa_email}"

  extraVolumes:
    - type: secret
      name: vault-tls

  readinessProbe:
    enabled: true
    path: /v1/sys/health?standbyok=true

  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              app: {{ template "vault.name" . }}
              release: "{{ .Release.Name }}"
              component: server
          topologyKey: kubernetes.io/hostname

  service:
    enabled: true

  ha:
    enabled: true
    replicas: 3

    config: |
      api_addr     = "https://${load_balancer_ip}:8200"
      cluster_addr = "https://POD_IP:8201"

      ui = true

      log_level = "warn"

      max_lease_ttl = "1680h" # 70 days

      listener "tcp" {
        address     = "127.0.0.1:8200"
        tls_disable = "true"
      }

      listener "tcp" {
        address = "POD_IP:8200"
        tls_cert_file = "/vault/userconfig/vault-tls/vault.pem"
        tls_key_file  = "/vault/userconfig/vault-tls/vault.key"

        tls_disable_client_certs = true
      }

      storage "gcs" {
        bucket     = "${gcs_bucket_name}"
        ha_enabled = "true"
      }

      seal "gcpckms" {
        project    = "${project}"
        region     = "${cluster_region}"
        key_ring   = "${kms_key_ring}"
        crypto_key = "${kms_crypto_key}"
      }
